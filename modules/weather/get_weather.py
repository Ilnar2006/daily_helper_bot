"""
–ö–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ API OpenWeather. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ.
"""

import aiohttp
import asyncio
from typing import Optional, Dict, Any
import logging


# –õ–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class WeatherService:
    
    def __init__(self, api_key: str, base_url: str = "https://api.openweathermap.org/data/2.5"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ 
        
        :param API_KEY: API –∫–ª—é—á –¥–ª—è OpenWeather
        :param base_url: –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
        """

        self.api_key = api_key
        self.base_url = base_url.rstrip("/")
        self.session: Optional[aiohttp.ClientSession] = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –±—É–¥–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–∞ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

    async def __aenter__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_value, traceback):
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        await self.close()

    async def _fetch(self, endpoint: str, params: Dict[str, str]) -> Optional[Dict[str, Any]]:
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API.
        :param endpoint: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, "weather", "forecast").
        :param params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞.
        :return: –û—Ç–≤–µ—Ç API –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        
        if not self.session:
            self.session = aiohttp.ClientSession()

        params["appid"] = self.api_key

        try:
            async with self.session.get(f"{self.base_url}/{endpoint}", params=params) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    error_message = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ API: {response.status}: {error_message}")
                    return None
                
        except asyncio.TimeoutError:
            logger.error("‚è± –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenWeather")
        except aiohttp.ClientError as e:
            logger.error(f"üåê –û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

        return None
    
    # ================= –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ================= #
         

    async def get_current_weather(self,
                                  lat: float,
                                  lon: float,
                                  units: str = "metric",
                                  lang: str = "ru") -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.

        Args:
            lat (float): –®–∏—Ä–æ—Ç–∞.
            lon (float): –î–æ–ª–≥–æ—Ç–∞.
            units (str, optional): –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "metric".
            lang (str, optional): –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "ru".

        Returns:
            Optional[Dict[str, Any]]: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """

        # –í–∞–¥–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if not (-90 <= lat <= 90) or not (-180 <= lon <= 180):
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.")
            return None
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–∞
        params = {
            "lat": lat,
            "lon": lon,
            "units": units,
            "lang": lang
        }

        return await self._fetch("weather", params)

    async def get_forecast(self,
                                   lat: float,
                                   lon: float,
                                   units: str = "metric",
                                   lang: str = "ru") -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π —Å —à–∞–≥–æ–º 3 —á–∞—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.
        Args:
            lat (float): –®–∏—Ä–æ—Ç–∞.
            lon (float): –î–æ–ª–≥–æ—Ç–∞.
            units (str, optional): –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "metric".
        Returns:
            Optional[Dict[str, Any]]: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """

        # –í–∞–¥–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if not (-90 <= lat <= 90) or not (-180 <= lon <= 180):
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.")
            return None
        
        params = {
            "lat": lat,
            "lon": lon,
            "units": units,
            "lang": lang
        }

        return await self._fetch("forecast", params)
    
        
    async def close(self):
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏.
        """
        if self.session:
            await self.session.close()
            self.session = None