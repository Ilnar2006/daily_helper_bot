async def format_current_weather(data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ.
    """
    if not data:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."

    weather = data.get("weather", [{}])[0]
    main = data.get("main", {})
    wind = data.get("wind", {})

    description = weather.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
    temperature = main.get("temp", 0)
    feels_like = main.get("feels_like", 0)
    humidity = main.get("humidity", 0)
    wind_speed = wind.get("speed", 0)

    return (f"üå§Ô∏è –ü–æ–≥–æ–¥–∞: {description}\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
            f"üí® –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üå¨Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n"
            f"üìç –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è")

async def format_forecast(data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã.
    """
    if not data or "list" not in data:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã."

    forecast_lines = []
    for entry in data["list"]:
        dt_txt = entry.get("dt_txt", "–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏")
        weather = entry.get("weather", [{}])[0]
        main = entry.get("main", {})
        wind = entry.get("wind", {})

        description = weather.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
        temperature = main.get("temp", 0)
        humidity = main.get("humidity", 0)
        wind_speed = wind.get("speed", 0)

        forecast_lines.append(
            (f"üìÖ {dt_txt}\n"
             f"üå§Ô∏è –ü–æ–≥–æ–¥–∞: {description}\n"
             f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
             f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
             f"üå¨Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n")
        )

    return "\n".join(forecast_lines)

async def format_weekly_forecast(data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–µ–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã.
    """
    if not data or "list" not in data:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–µ–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã."

    daily_forecast = {}
    for entry in data["list"]:
        date = entry.get("dt_txt", "").split(" ")[0]
        if date not in daily_forecast:
            daily_forecast[date] = []
        daily_forecast[date].append(entry)

    forecast_lines = []
    for date, entries in daily_forecast.items():
        temps = [e.get("main", {}).get("temp", 0) for e in entries]
        descriptions = [e.get("weather", [{}])[0].get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è") for e in entries]
        avg_temp = sum(temps) / len(temps) if temps else 0
        common_description = max(set(descriptions), key=descriptions.count) if descriptions else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"

        forecast_lines.append(
            (f"üìÖ {date}\n"
             f"üå§Ô∏è –ü–æ–≥–æ–¥–∞: {common_description}\n"
             f"üå°Ô∏è –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {avg_temp:.1f}¬∞C\n")
        )

    return "\n".join(forecast_lines)

async def format_tomorrow_weather(data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
    """
    if not data or "list" not in data:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞."

    tomorrow_date = None
    for entry in data["list"]:
        dt_txt = entry.get("dt_txt", "")
        if " " in dt_txt:
            date_part = dt_txt.split(" ")[0]
            if tomorrow_date is None:
                tomorrow_date = date_part
            elif date_part != tomorrow_date:
                break

        weather = entry.get("weather", [{}])[0]
        main = entry.get("main", {})
        wind = entry.get("wind", {})

        description = weather.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
        temperature = main.get("temp", 0)
        humidity = main.get("humidity", 0)
        wind_speed = wind.get("speed", 0)

        return (f"üìÖ –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow_date}):\n"
                f"üå§Ô∏è –ü–æ–≥–æ–¥–∞: {description}\n"
                f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"üå¨Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n")

    return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞."