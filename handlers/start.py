import json
import os
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, ReplyKeyboardRemove

from services.get_geo import get_location_from_coords_async
from .start_keyboard import gender_keyboard, social_status_keyboard, confirm_keyboard, main_menu_keyboard, send_location_keyboard

start_router = Router()

JSON_FILE_PATH = "data/users.json"


# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
class Registration(StatesGroup):
    name = State()
    gender = State()
    age = State()
    status = State()
    city = State()
    location = State()
    confirm = State()


# —Ä–∞–±–æ—Ç–∞ —Å JSON-—Ñ–∞–π–ª–æ–º (–∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)
def load_users():
    if not os.path.exists(JSON_FILE_PATH):
        return {}
    with open(JSON_FILE_PATH, "r", encoding="utf-8") as f:
        return json.load(f)


def save_users(users):
    with open(JSON_FILE_PATH, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=4)


# =================================
# –•–µ–Ω–¥–ª–µ—Ä—ã
# =================================

# –°—Ç–∞—Ä—Ç
@start_router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    users = load_users()
    user_id = str(message.from_user.id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –µ–≥–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if user_id in users:
        await message.answer(
            """üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!
            –Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.
            –ü–æ–º–æ–≥–∞—é —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∑–∞–¥–∞—á–∞–º–∏, –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É, 
            –∏ —É –º–µ–Ω—è –µ—Å—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π AI.
            –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:""",
            reply_markup=main_menu_keyboard()
        )

    # –ò–Ω–∞—á–µ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç üëã –í–∏–∂—É —Ç—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ. –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(Registration.name)


# –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@start_router.message(Registration.name)
async def reg_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)

    await message.answer("–û—Ç–ª–∏—á–Ω–æ! üöÄ –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_keyboard())
    await state.set_state(Registration.gender)


# –ü–æ–ª 
@start_router.callback_query(Registration.gender, F.data.startswith("gender_"))
async def reg_gender(callback: CallbackQuery, state: FSMContext):
    gender = "–ú—É–∂—Å–∫–æ–π" if callback.data == "gender_m" else "–ñ–µ–Ω—Å–∫–∏–π"
    await state.update_data(gender=gender)

    await callback.message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(Registration.age)
    await callback.answer()


# –í–æ–∑—Ä–∞—Å—Ç
@start_router.message(Registration.age)
async def reg_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)

    await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å?", 
                         reply_markup=social_status_keyboard())
    await state.set_state(Registration.status)


# –°–æ—Ü. —Å—Ç–∞—Ç—É—Å
@start_router.callback_query(Registration.status)
async def reg_status(callback: CallbackQuery, state: FSMContext):
    status_map = {
        "social_status_schoolboy": "–®–∫–æ–ª—å–Ω–∏–∫",
        "social_status_student": "–°—Ç—É–¥–µ–Ω—Ç",
        "social_status_worker": "–†–∞–±–æ—á–∏–π",
        "social_status_other": "–î—Ä—É–≥–æ–µ"
    }

    status = status_map.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    await state.update_data(status=status)

    # –û–±—ä—è—Å–Ω—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é (–∫–Ω–æ–ø–∫–∞) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≥–æ—Ä–æ–¥
    await callback.message.answer(
        "üåç –£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.\n"
        "‚Äî –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é¬ª, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö).\n"
        "‚Äî –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ —Ç–µ–∫—Å—Ç–æ–º.",
        reply_markup=send_location_keyboard)  # —ç—Ç–æ ReplyKeyboardMarkup —Å request_location=True
    # –≤–∞–∂–Ω–æ: —É–±—Ä–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä —É –Ω–∞–∂–∞—Ç–æ–π inline-–∫–Ω–æ–ø–∫–∏
    await callback.answer()
    # —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
    await state.set_state(Registration.city)


# ---- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Registration.city ----
@start_router.message(Registration.city)
async def reg_city(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏–±–æ –ø—Ä–∏—Å–ª–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é (message.location),
    –ª–∏–±–æ —Ç–µ–∫—Å—Ç (message.text).
    –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.
    """
    # 1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö)
    if message.location is not None:
        lat = message.location.latitude
        lon = message.location.longitude

        # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) reverse geocoding: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.
        try:
            user_location = await get_location_from_coords_async(lat, lon) # –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å–ª–æ–≤–∞—Ä—å {"name", "ru_name", "en_name", "state", "country", "lat", "lon"}
            
            if user_location and user_location.get("ru_name"):

                city = user_location["ru_name"]  # –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                await state.update_data(city=city, location={"lat": lat, "lon": lon})

                await message.answer(
                    f"–û—Ç–ª–∏—á–Ω–æ, –æ–ø—Ä–µ–¥–µ–ª–∏–ª –≤–∞—à –≥–æ—Ä–æ–¥ {city}", reply_markup=ReplyKeyboardRemove()
                    )
                
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç, —Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ–∑–∂–µ", reply_markup=send_location_keyboard())

                return  # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî –∂–¥—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            
        except Exception as e:
            print(f"Error in geocoding: {e}")
            # –¥–∞—ë–º –ø–æ–Ω—è—Ç–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Registration.city
            await message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. "
                "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.",
                reply_markup=send_location_keyboard()
                )
            return  # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî –∂–¥—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞


    # 2) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" 
    elif message.text and message.text.strip() == "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(city=None, location={"lat": None, "lon": None})

        # —É–±—Ä–∞—Ç—å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Å—Ç–∞–ª–∞—Å—å)
        await message.answer("–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /settings", reply_markup=ReplyKeyboardRemove())

    # 3) –ß—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ –ø—Ä–∏—à–ª–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –Ω–∞ Desktop, –Ω–æ –ª–æ–∫–∞—Ü–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å)
    else:
        # –¥–∞—ë–º –ø–æ–Ω—è—Ç–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Registration.city
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:\n\n"
            "‚Ä¢ üìç **–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ** - –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞\n"
            "‚Ä¢ ‚û°Ô∏è **–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å** - –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n\n"
            "–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∑–∂–µ.",
            reply_markup=send_location_keyboard()
        )
        return  # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî –∂–¥—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞

     # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è city ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = await state.get_data() # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ class Registration –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é data
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 
    text = ( # –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π f-string —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ state data 
        f"üìã –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"–ò–º—è: {data.get('name') or "‚ùå –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}\n"
        f"–ü–æ–ª: {data.get('gender') or "‚ùå –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data.get('age') or "‚ùå –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}\n"
        f"–°—Ç–∞—Ç—É—Å: {data.get('status') or "‚ùå –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}\n"
        f"–ì–æ—Ä–æ–¥: {data.get('city') or "‚ùå –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ? –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
    )

    await message.answer(text, reply_markup=confirm_keyboard())  # inline-–∫–Ω–æ–ø–∫–∏ "–î–∞ / –ò–∑–º–µ–Ω–∏—Ç—å"
    await state.set_state(Registration.confirm)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî –î–ê
@start_router.callback_query(Registration.confirm, F.data == "confirm_yes")
async def reg_confirm_yes(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    users = load_users()
    user_id = str(callback.from_user.id)

    users[user_id] = {
        "id": callback.from_user.id,
        "name": data.get("name", ""),
        "age": int(data.get("age", 0)),
        "gender": data.get("gender", ""),
        "city": data.get("city", ""),
        "location": data.get("location", {}),  # –∑–¥–µ—Å—å —Å–ª–æ–≤–∞—Ä—å —Å lat/lon/ru_name
        "status": data.get("status", ""),
        "preferences": {
            "notifications": True,
            "language": "ru",
            "timezone": ""
        }
    }
    save_users(users)

    await callback.message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    await callback.message.answer(
        "–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá",
        reply_markup=main_menu_keyboard()
    )
    await state.clear()
    await callback.answer()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
@start_router.callback_query(Registration.confirm, F.data == "confirm_edit")
async def reg_confirm_edit(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úè –û–∫–µ–π, –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")
    await state.set_state(Registration.name)
    await callback.answer()
